{"/home/travis/build/npmtest/node-npmtest-asciify/test.js":"/* istanbul instrument in package npmtest_asciify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-asciify/lib.npmtest_asciify.js":"/* istanbul instrument in package npmtest_asciify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_asciify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_asciify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-asciify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-asciify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_asciify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_asciify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_asciify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_asciify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_asciify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_asciify.__dirname + '/lib.npmtest_asciify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-asciify/node_modules/asciify/index.js":"/*\n   _____     __________________  .___ .___ ________________.___.._.\n  /  _  \\   /   _____/\\_   ___ \\ |   ||   |\\_   _____/\\__  |   || |\n /  /_\\  \\  \\_____  \\ /    \\  \\/ |   ||   | |    __)   /   |   || |\n/    |    \\ /        \\\\     \\____|   ||   | |     \\    \\____   | \\|\n\\____|__  //_______  / \\______  /|___||___| \\___  /    / ______| __\n        \\/         \\/         \\/                \\/     \\/        \\/\n\nInstall: npm install asciify\nUsage: \n\tvar asciify = require('asciify');\n\tasciify('Whoa', {font:'3-d'}, function(err, result){console.log(result)});\n*/\nvar figlet = require('./lib/figlet-js/figlet-node');\nvar path = require('path');\nvar fs = require('fs');\nvar chalk = require('chalk');\n\nmodule.exports = function (text, opts, callback) {\n\n\t// Ensure text is a string\n\ttext = text + '';\n\n\tif (typeof opts === 'function') {\n\t\tcallback = opts;\n\t\topts = null;\n\t}\n\n\t// Fix up the opts. Default font is graffiti.\n\topts = opts || {};\n\n\tif (typeof opts === 'string') {\n\t\topts = { font: opts };\n\t}\n\n\topts.font = opts.font || 'graffiti';\n\n\tif (typeof opts.font !== 'string') {\n\t\tcallback('opts.font should be a font name string');\n\t}\n\n\t// Current implementation depends on figlet-js.\n\tfiglet.Figlet.write(text, opts.font, function (err, asciifiedText) {\n\t\tif (opts.maxWidth) {\n\t\t\tasciifiedText = trimToMaxWidth(opts.maxWidth, asciifiedText);\n\t\t}\n\t\tif (opts.color) {\n\t\t\tasciifiedText = chalk[opts.color](asciifiedText);\n\t\t}\n\t\tcallback(err, asciifiedText);\n\t});\n};\n\n// truncate the ascii art to fit a thing\nfunction trimToMaxWidth (width, text) {\n\tvar truncated = text.split('\\n').map(function (line) {\n\t\treturn line.substring(0, width);\n\t});\n\treturn truncated.join('\\n');\n}\n\n/*\n * Provide the callback with array of font names, sans file extension.\n */\nmodule.exports.getFonts = function (callback) {\n\n\tvar fontsDir = path.resolve(__dirname, 'lib', 'figlet-js', 'fonts');\n\n\t// No caching, just reading. Caller should cache if they need to.\n\tfs.readdir(fontsDir, function (err, files) {\n\n\t\tif (err) { return callback(err); }\n\t\t\n\t\tvar fonts = files.map(function (file) {\n\t\t\treturn file.slice(0, file.length - 4); // chop off the '.flf' extension\n\t\t});\n\n\t\tcallback(err, fonts);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-asciify/node_modules/asciify/lib/figlet-js/figlet-node.js":" /**\n * Figlet JS node.js module\n * \n * Copyright (c) 2010 Scott González\n * Dual licensed under the MIT (MIT-LICENSE.txt)\n * and GPL (GPL-LICENSE.txt) licenses.\n * \n * http://github.com/scottgonzalez/figlet-js\n */\n\nvar fs = require(\"fs\");\nvar path = require('path');\nvar Figlet = require(\"./figlet\").Figlet;\n\nFiglet.loadFont = function(name, fn) {\n\n\tvar fileName = name + \".flf\";\n\t\n\tvar filePath = path.resolve(__dirname, \"fonts\", fileName);\n\n\tfs.readFile(filePath, \"utf8\", function(err, contents) {\n\n\t\tfn(err, contents);\n\t});\n};\n\nexports.Figlet = Figlet;\n","/home/travis/build/npmtest/node-npmtest-asciify/node_modules/asciify/lib/figlet-js/figlet.js":"/**\n * Figlet JS\n * \n * Copyright (c) 2010 Scott González\n * Dual licensed under the MIT (MIT-LICENSE.txt)\n * and GPL (GPL-LICENSE.txt) licenses.\n * \n * http://github.com/scottgonzalez/figlet-js\n */\n\n(function() {\n\nvar Figlet = (typeof exports !== \"undefined\" ? exports : window).Figlet = {\n\tfonts: {},\n\t\n\tparseFont: function(name, fn) {\n\t\tif (name in Figlet.fonts) {\n\t\t\tfn();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tFiglet.loadFont(name, function(err, defn) {\n\t\t\tif (err) {\n\t\t\t\tfn(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tFiglet._parseFont(name, defn, fn);\n\t\t});\n\t},\n\t\n\t_parseFont: function(name, defn, fn) {\n\t\tvar lines = defn.split(\"\\n\"),\n\t\t\theader = lines[0].split(\" \"),\n\t\t\thardblank = header[0].charAt(header[0].length - 1),\n\t\t\theight = +header[1],\n\t\t\tcomments = +header[5];\n\t\t\n\t\tFiglet.fonts[name] = {\n\t\t\tdefn: lines.slice(comments + 1),\n\t\t\thardblank: hardblank,\n\t\t\theight: height,\n\t\t\tchar: {}\n\t\t};\n\t\tfn();\n\t},\n\t\n\tparseChar: function(char, font) {\n\t\tvar fontDefn = Figlet.fonts[font];\n\t\tif (char in fontDefn.char) {\n\t\t\treturn fontDefn.char[char];\n\t\t}\n\t\t\n\t\tvar height = fontDefn.height,\n\t\t\tstart = (char - 32) * height,\n\t\t\tcharDefn = [],\n\t\t\ti;\n\t\t\n\t\t// Is char defined?\n\t\tif (!fontDefn.defn[start]) {\n\t\t\tstart = (\" \".charCodeAt(0) - 32) * height;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < height; i++) {\n\t\t\tcharDefn[i] = fontDefn.defn[start + i]\n\t\t\t\t.replace(/@/g, \"\")\n\t\t\t\t.replace(RegExp(\"\\\\\" + fontDefn.hardblank, \"g\"), \" \");\n\t\t}\n\t\treturn fontDefn.char[char] = charDefn;\n\t},\n\t\n\twrite: function(str, font, fn) {\n\t\tif (!str) {\n\t\t\treturn fn(null, \"\");\n\t\t}\n\t\t\n\t\tFiglet.parseFont(font, function(err) {\n\t\t\tif (err) {\n\t\t\t\tfn(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar chars = [],\n\t\t\t\tresult = \"\";\n\t\t\tfor (var i = 0, len = str.length; i < len; i++) {\n\t\t\t\tchars[i] = Figlet.parseChar(str.charCodeAt(i), font);\n\t\t\t}\n\t\t\tfor (i = 0; i < chars[0].length; i++) {\n\t\t\t\tfor (var j = 0; j < len; j++) {\n\t\t\t\t\tresult += chars[j][i];\n\t\t\t\t}\n\t\t\t\tresult += \"\\n\";\n\t\t\t}\n\t\t\tfn(null, result);\n\t\t});\n\t}\n};\n\n})();\n\n","/home/travis/build/npmtest/node-npmtest-asciify/node_modules/asciify/bin/asciify.js":"#!/usr/bin/env node\n/*\n   _____     __________________  .___ .___ ________________.___.._.\n  /  _  \\   /   _____/\\_   ___ \\ |   ||   |\\_   _____/\\__  |   || |\n /  /_\\  \\  \\_____  \\ /    \\  \\/ |   ||   | |    __)   /   |   || |\n/    |    \\ /        \\\\     \\____|   ||   | |     \\    \\____   | \\|\n\\____|__  //_______  / \\______  /|___||___| \\___  /    / ______| __\n        \\/         \\/         \\/                \\/     \\/        \\/\n\nInstall: npm install -g asciify\nUsage: asciify \"my prose\"\n*/\n\nvar asciify = require('../');\nvar pad = require('pad');\nvar argv = require('optimist')\n\t.usage('Plain text awesomizer.\\nUsage: $0 \"your text here\"')\n    .alias('l', 'list')\n    .describe('l', 'List the fonts')\n    .alias('a', 'all')\n    .describe('a', 'SHOW ALL THE FONTS!')\n    .alias('f', 'font')\n    .describe('f', 'Font to use for asciification')\n    .alias('t', 'truncate')\n    .describe('t', 'Trim the output to fit the tty')\n    .default('f', 'graffiti')\n    .check(function(argv){\n    \tif(!argv.list && !argv.all && argv._.length === 0) { \n    \t\tthrow 'Specify some text to asciify or -l or -a'\n    \t}\n    })\n    .argv;\n\n// Show font list\nif (argv.list){\n\tlistFonts();\n\treturn;\n}\n\n// Show text in all the fonts\nif (argv.all){\t\n\tvar exampleText = 'Asciify!';          // Default\n\n\tif (argv._.length > 0){                // Your argz, zay are muddled.\n\t\texampleText = argv._.join(' ');\n\t}\n\tif (typeof argv.all === 'string'){     // Excellent\n\t\texampleText = argv.all;\n\t}\n\n\tshowAll(exampleText);\n\treturn;\n}\n\n// Do a regular asciification.\nconsole.log('');\nargv._.forEach(function (arg) {\n  var opts = { font: argv.font }\n  \n  if (argv.truncate && process.stdout.isTTY) {\n    opts.maxWidth = process.stdout.columns\n  }\n\n\tasciify(arg, opts, function (err, result) {\n\t\tif (err) { return console.error(err); }\n\t\tconsole.log(result);\n\t});\n});\n\n/* \n * Write the font list to console\n */\nfunction listFonts () {\n\n\tasciify.getFonts(function (err, fonts) {\n\t\tif (err) { return console.error(err); }\n\n\t\tvar padSize = ('' + fonts.length).length;\n\n\t\tfonts.forEach(function (font, index) {\n\t\t\tconsole.log(pad(padSize, index+1, '0') + ': ' + font);\n\t\t});\n\t});\n}\n\n/* \n * Write examples of all the fonts to console\n */\nfunction showAll (text) {\n\n\tasciify.getFonts(function (err, fonts) {\n\t\tif (err) { return console.error(err); }\n\n\t\tvar padSize = ('' + fonts.length).length;\n\n\t\tfonts.forEach(function(font, index) {\n\t\t\tasciify(exampleText, font, function (err, result) {\n\t\t\t\tconsole.log(pad(padSize, index+1, '0') + ': ' + font);\n\t\t\t\tconsole.log(result);\n\t\t\t\tconsole.log('');\n\t\t\t});\n\t\t});\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-asciify/node_modules/asciify/lib/figlet-js/demo.js":"var Figlet = require(\"./figlet-node\").Figlet;\n\nvar puts = require(\"sys\").puts;\nFiglet.write(\"Figlet JS\", \"standard\", function(str) {\n\tputs(str);\n});\n\n","/home/travis/build/npmtest/node-npmtest-asciify/node_modules/asciify/lib/figlet-js/jquery.figlet.js":"/**\n * Figlet JS jQuery Plugin\n * \n * Copyright (c) 2010 Scott González\n * Dual licensed under the MIT (MIT-LICENSE.txt)\n * and GPL (GPL-LICENSE.txt) licenses.\n * \n * http://github.com/scottgonzalez/figlet-js\n * \n * Requires figlet.js\n */\n(function($) {\n\nFiglet.loadFont = function(name, fn) {\n\t$.ajax({\n\t\turl: \"fonts/\" + name + \".flf\",\n\t\tdataType: \"text\",\n\t\tsuccess: fn\n\t});\n};\n\n$.fn.figlet = function(text, font) {\n\tvar elems = this;\n\tFiglet.write(text, font || $.fn.figlet.defaultFont, function(str) {\n\t\telems.text(str);\n\t});\n\treturn this;\n};\n\n$.fn.figlet.defaultFont = \"standard\";\n\n})(jQuery);\n"}